{"remainingRequest":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Mike/Documents/GitHub/happy-vue/happy-vue/src/views/users/Users.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/src/views/users/Users.vue","mtime":1576852206665},{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCB1c2Vyc0RhdGEgZnJvbSAnLi9Vc2Vyc0RhdGEnCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnVXNlcnMnLAogIGRhdGE6ICgpID0+IHsKICAgIHJldHVybiB7CiAgICAgIGl0ZW1zOiB1c2Vyc0RhdGEsCiAgICAgIGZpZWxkczogWwogICAgICAgIHsga2V5OiAndXNlcm5hbWUnLCBsYWJlbDogJ05hbWUnIH0sCiAgICAgICAgeyBrZXk6ICdyZWdpc3RlcmVkJyB9LAogICAgICAgIHsga2V5OiAncm9sZScgfSwKICAgICAgICB7IGtleTogJ3N0YXR1cycgfQogICAgICBdLAogICAgICBwZXJQYWdlOiA1LAogICAgfQogIH0sCiAgcGFnaW5hdGlvblByb3BzOiB7CiAgICBhbGlnbjogJ2NlbnRlcicsCiAgICBkb3VibGVBcnJvd3M6IGZhbHNlLAogICAgcHJldmlvdXNCdXR0b25IdG1sOiAncHJldicsCiAgICBuZXh0QnV0dG9uSHRtbDogJ25leHQnCiAgfSwKICBtZXRob2RzOiB7CiAgICBnZXRCYWRnZSAoc3RhdHVzKSB7CiAgICAgIHJldHVybiBzdGF0dXMgPT09ICdBY3RpdmUnID8gJ3N1Y2Nlc3MnCiAgICAgICAgOiBzdGF0dXMgPT09ICdJbmFjdGl2ZScgPyAnc2Vjb25kYXJ5JwogICAgICAgICAgOiBzdGF0dXMgPT09ICdQZW5kaW5nJyA/ICd3YXJuaW5nJwogICAgICAgICAgICA6IHN0YXR1cyA9PT0gJ0Jhbm5lZCcgPyAnZGFuZ2VyJyA6ICdwcmltYXJ5JwogICAgfSwKICAgIHVzZXJMaW5rIChpZCkgewogICAgICByZXR1cm4gYHVzZXJzLyR7aWQudG9TdHJpbmcoKX1gCiAgICB9LAogICAgcm93Q2xpY2tlZCAoaXRlbSwgaW5kZXgpIHsKICAgICAgY29uc3QgdXNlckxpbmsgPSB0aGlzLnVzZXJMaW5rKGluZGV4ICsgMSkKICAgICAgdGhpcy4kcm91dGVyLnB1c2goe3BhdGg6IHVzZXJMaW5rfSkKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Users.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Users.vue","sourceRoot":"src/views/users","sourcesContent":["<template>\n  <CRow>\n    <CCol col=\"12\" xl=\"8\">\n      <transition name=\"slide\">\n        <CCard>\n          <CCardHeader>\n            Users\n          </CCardHeader>\n          <CCardBody>\n            <CDataTable\n              hover\n              striped\n              :items=\"items\"\n              :fields=\"fields\"\n              :items-per-page=\"perPage\"\n              @row-clicked=\"rowClicked\"\n              :pagination=\"$options.paginationProps\"\n              index-column\n              clickable-rows\n            >\n              <template #username=\"data\">\n                <td>\n                  <strong>{{data.item.username}}</strong>\n                </td>\n              </template>\n            \n              <template #status=\"data\">\n                <td>\n                  <CBadge :color=\"getBadge(data.item.status)\">\n                    {{data.item.status}}\n                  </CBadge>\n                </td>\n              </template>\n            </CDataTable>\n          </CCardBody>\n        </CCard>\n      </transition>\n    </CCol>\n  </CRow>\n</template>\n\n<script>\nimport usersData from './UsersData'\nexport default {\n  name: 'Users',\n  data: () => {\n    return {\n      items: usersData,\n      fields: [\n        { key: 'username', label: 'Name' },\n        { key: 'registered' },\n        { key: 'role' },\n        { key: 'status' }\n      ],\n      perPage: 5,\n    }\n  },\n  paginationProps: {\n    align: 'center',\n    doubleArrows: false,\n    previousButtonHtml: 'prev',\n    nextButtonHtml: 'next'\n  },\n  methods: {\n    getBadge (status) {\n      return status === 'Active' ? 'success'\n        : status === 'Inactive' ? 'secondary'\n          : status === 'Pending' ? 'warning'\n            : status === 'Banned' ? 'danger' : 'primary'\n    },\n    userLink (id) {\n      return `users/${id.toString()}`\n    },\n    rowClicked (item, index) {\n      const userLink = this.userLink(index + 1)\n      this.$router.push({path: userLink})\n    }\n  }\n}\n</script>\n"]}]}