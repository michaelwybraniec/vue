{"remainingRequest":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/Mike/Documents/GitHub/happy-vue/happy-vue/src/views/widgets/WidgetsDropdown.vue?vue&type=template&id=30864194&","dependencies":[{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/src/views/widgets/WidgetsDropdown.vue","mtime":1576852206666},{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/Mike/Documents/GitHub/happy-vue/happy-vue/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}